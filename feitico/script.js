const searchWrapper = document.querySelector(".search");
const inputBox = searchWrapper.querySelector("input");
const sugestBox = searchWrapper.querySelector(".list");

let feiti√ßos = [];
let nomeFeiti√ßos = [];
let feiti√ßoAleatorio;
let jogoTerminado = false;
let feiti√ßosTentados = [];

// Fetch dos feiti√ßos
fetch('https://potterapi-fedeperin.vercel.app/pt/spells')
    .then(response => response.json())
    .then(data => {
        feiti√ßos = data.map(f => ({
            nome: f.spell,
            descricao: f.use
        }));
        nomeFeiti√ßos = feiti√ßos.map(f => f.nome.toLowerCase());
        selectRandomSpell();
    })
    .catch(error => {
        console.log('Erro ao buscar feiti√ßos:', error);
    });

// Fun√ß√£o para lidar com entrada do usu√°rio
inputBox.onkeyup = (e) => {
    if (jogoTerminado) return; // Se o jogo terminou, ignora o evento

    let userData = e.target.value; // Dados digitados pelo usu√°rio
    let emptyArray = [];

    if (e.key === 'Enter') {
        if (userData) {
            // Verifica se o feiti√ßo j√° foi tentado
            if (feiti√ßosTentados.includes(userData.toLowerCase())) {
                return;
            }

            // Busca o feiti√ßo correspondente
            let feiti√ßoSelecionado = feiti√ßos.find(f => f.nome.toLowerCase() === userData.toLowerCase());
            if (feiti√ßoSelecionado) {
                feiti√ßosTentados.push(userData.toLowerCase()); // Adiciona o feiti√ßo √† lista de tentativas
                inputBox.value = ''; // Limpa o campo de entrada
                compareSpell(feiti√ßoSelecionado); // Compara o feiti√ßo
            } else {
                alert("Feiti√ßo n√£o encontrado! Tente novamente.");
            }
        }
    }

    if (userData) {
        emptyArray = nomeFeiti√ßos
            .filter(data => {
                // Filtra apenas feiti√ßos v√°lidos contendo o texto digitado e que n√£o foram tentados
                return data.includes(userData.toLowerCase()) && !feiti√ßosTentados.includes(data);
            })
            .map(data => {
                return `<li>${data}</li>`;
            });

        if (emptyArray.length > 0) {
            searchWrapper.classList.add("active"); // Mostra a caixa de sugest√µes
            showSuggestions(emptyArray);
        } else {
            searchWrapper.classList.remove("active"); // Esconde a caixa se n√£o houver sugest√µes
        }

        let allList = sugestBox.querySelectorAll("li");
        for (let i = 0; i < allList.length; i++) {
            allList[i].setAttribute("onclick", "select(this)");
        }

        if (e.key === 'Escape') {
            searchWrapper.classList.remove("active");
        }
    } else {
        searchWrapper.classList.remove("active"); // Esconde a caixa de sugest√µes
    }
};



// Seleciona um feiti√ßo ao clicar em uma sugest√£o
function select(element) {
    let selectData = element.textContent;
    inputBox.value = selectData;

    searchWrapper.classList.remove("active");
}

// Fun√ß√£o para comparar o feiti√ßo digitado com o feiti√ßo aleat√≥rio
function compareSpell(feiti√ßo) {
    const detalheContainer = document.querySelector(".historico");

    // Cria um cont√™iner para a tentativa
    const tentativaContainer = document.createElement("div");
    tentativaContainer.classList.add("tentativa-feiti√ßo");

    // Verifica se o feiti√ßo est√° correto
    const cor = feiti√ßo.nome.toLowerCase() === feiti√ßoAleatorio.nome.toLowerCase() ? 'green' : 'red';

    tentativaContainer.innerHTML = `
    <div style="color: ${cor}; font-weight: bold; background-color: white; padding: 10px; margin-bottom: 10px; min-width: 200px; display: inline-block;">
        ${feiti√ßo.nome}
    </div>
    `;


    detalheContainer.prepend(tentativaContainer); // Adiciona ao hist√≥rico

    if (feiti√ßo.nome.toLowerCase() === feiti√ßoAleatorio.nome.toLowerCase()) {
        displayWinMessage(); // Exibe mensagem de vit√≥ria
        jogoTerminado = true; // Marca o jogo como terminado
        inputBox.disabled = true; // Desativa o campo de entrada
        inputBox.value = ''; // Limpa o campo de entrada
        searchWrapper.classList.remove("active"); // Esconde sugest√µes
    }
}

function startConfetti() {
    const efeitoPurpurina = document.querySelector(".efeito-purpurina");

    for (let i = 0; i < 50; i++) {
        const emoji = document.createElement("div");
        emoji.classList.add("emoji");
        emoji.textContent = "üéâ"; // Emoji de festa

        // Define posi√ß√£o e velocidade aleat√≥rias
        emoji.style.left = Math.random() * 100 + "vw";
        emoji.style.animationDelay = Math.random() * 2 + "s";
        emoji.style.animationDuration = 3 + Math.random() * 2 + "s";

        efeitoPurpurina.appendChild(emoji);

        // Remove o emoji ap√≥s a anima√ß√£o
        setTimeout(() => {
            emoji.remove();
        }, 5000);
    }
}

// Chama o confetti ao exibir a mensagem de vit√≥ria
function displayWinMessage() {
    const detalheContainer = document.querySelector(".historico");
    const mensagemVitoria = document.createElement("div");
    mensagemVitoria.classList.add("mensagem-vitoria");
    mensagemVitoria.innerText = "üéâ Parab√©ns! Voc√™ acertou o feiti√ßo do dia!";
    detalheContainer.prepend(mensagemVitoria);

    startConfetti(); // Inicia o efeito de purpurina
}



// Seleciona o feiti√ßo aleat√≥rio do dia
function selectRandomSpell() {
    const today = new Date();
    const dayOfYear = Math.floor((today - new Date(today.getFullYear(), 0, 0)) / 86400000); // Calcula o dia do ano

    const randomIndex = dayOfYear % feiti√ßos.length;

    feiti√ßoAleatorio = feiti√ßos[randomIndex];
    console.log("Feiti√ßo aleat√≥rio do dia: ", feiti√ßoAleatorio.nome);

    // Exibe a descri√ß√£o do feiti√ßo aleat√≥rio na interface
    const randomSpellDescription = document.querySelector(".feitico-aleatorio");
    randomSpellDescription.innerHTML = `
        "${feiti√ßoAleatorio.descricao || "Descri√ß√£o indispon√≠vel"}"
    `;
}

// Mostra sugest√µes na lista
function showSuggestions(list) {
    let listData;
    if (!list.length) {
        userValue = inputBox.value;
        listData = `<li>${userValue}</li>`;
    } else {
        listData = list.join('');
    }
    sugestBox.innerHTML = listData;
}
